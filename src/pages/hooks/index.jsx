import { useState, useEffect, useCallback, useMemo } from 'react';

/* useState 

    üß© 1. Importando o Hook
        Aqui voc√™ est√° importando o useState do React ‚Äî ele serve para armazenar e atualizar valores dentro de componentes funcionais.
            import { useState } from 'react'; 

    ‚öôÔ∏è 2. Criando o componente
        const EstudoDeHooks = () => {
            Esse √© um componente funcional. Ele pode conter HTML, l√≥gica e Hooks.
        
    üíæ 3. Declarando o estado
        const [name, setName] = useState('J√∫lio');
        Aqui:
            name ‚Üí √© a vari√°vel de estado (valor atual).
            setName ‚Üí √© a fun√ß√£o usada para atualizar esse valor.
            'J√∫lio' ‚Üí √© o valor inicial do estado.

    üîÑ 4. Criando a fun√ß√£o que altera o estado
        const mudarName = () => {
            setName(name => name == 'J√∫lio' ? 'C√©sar' : 'J√∫lio')
        }
            Essa fun√ß√£o faz o seguinte:
                Verifica se o nome atual (name) √© "J√∫lio";
                Se for, muda para "C√©sar";
                Se n√£o for, volta para "J√∫lio".
            üü¢ O uso de setName(name => ...) √© uma boa pr√°tica:
            ele garante que voc√™ est√° sempre pegando o valor mais recente do estado.

    üñ•Ô∏è 5. Retornando o JSX (interface)
        return (
            <div>
                <p>{name}</p>
                <button onClick={mudarName}>Clique</button>
            </div>
        )
            {name} ‚Üí mostra o valor atual do estado na tela.
            O bot√£o chama mudarName quando clicado.
            Cada clique alterna o texto entre ‚ÄúJ√∫lio‚Äù e ‚ÄúC√©sar‚Äù. üéØ

    ‚úÖ Resultado esperado
        Ao abrir a p√°gina: aparece ‚ÄúJ√∫lio‚Äù.
        Ao clicar: muda para ‚ÄúC√©sar‚Äù.
        Ao clicar de novo: volta para ‚ÄúJ√∫lio‚Äù.

*/

/* useEffect 

// useEffect que roda toda vez que "name" muda
useEffect(() =>{
    console.log(`O nome mudou para: ${name}`);
        
    // opcional: mudar a cor de fundo dependendo do nome
    document.getElementById('p').style.backgroundColor = name === 'J√∫lio' ? '#1e90ff' : '#ff4757';

    // Cleanup (opcional): executa antes da pr√≥xima mudan√ßa
    return () => {
        console.log(`Limpando efeito anterior para o nome: ${name}`);
    };
}, [name]); // <--- depend√™ncia "name"

üß† Explicando o que acontece:
    | Linha                                       | O que faz                                                                                                            |
    | ------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
    | `useEffect(() => { ... }, [name])`          | Executa o c√≥digo **toda vez que o valor de `name` mudar**                                                            |
    | `console.log(...)`                          | Mostra no console o novo valor                                                                                       |
    | `document.body.style.backgroundColor = ...` | Muda a cor de fundo do Par√°grafo conforme muda o nome                                                                        |
    | `return () => {...}`                        | Fun√ß√£o opcional de **limpeza**, executada antes do pr√≥ximo efeito (boa pr√°tica para remover listeners, timers, etc.) |

üß© Resultado:
    Ao abrir a p√°gina, o nome √© ‚ÄúJ√∫lio‚Äù e o fundo fica azul.
    Quando clica no bot√£o:
        O nome muda para ‚ÄúC√©sar‚Äù.
        O fundo muda para vermelho.
        Aparece no console: O nome mudou para: C√©sar.

*/

/* useMemo 

useMemo = referencia em variaveis(const, var, let)
useMemo = üíæ memoriza um valor (resultado de uma conta)

‚úÖ useMemo agora retorna um valor calculado (sem alterar estado)
  const anoDeNascimento = useMemo(() => {
    const anoAtual = 2025;
    return anoAtual - age;
  }, [age]);

‚úÖ Explica√ß√£o passo a passo:
    useMemo diz ao React:
        ‚ÄúS√≥ recalcula este valor se algo dentro do array [age] mudar.‚Äù

    Sempre que o usu√°rio altera o campo de idade (age),
    o React executa novamente a fun√ß√£o dentro do useMemo.

    Se age n√£o muda, o React reutiliza o valor memorizado da √∫ltima vez.
    (Ou seja, evita refazer o c√°lculo desnecessariamente.)

üí° Dica de melhoria (boa pr√°tica)

    Em vez de usar um n√∫mero fixo (2025), √© mais flex√≠vel usar o ano atual do sistema:
        const anoDeNascimento = useMemo(() => {
            const anoAtual = new Date().getFullYear();
            return age ? anoAtual - age : '';
        }, [age]);
    Assim, o c√≥digo continua funcionando corretamente no futuro sem precisar alterar o valor manualmente.

*/

/* useCallback

useCallback = referencia de funcao.
useCallback = üîÅ memoriza uma fun√ß√£o

‚úÖ O que o seu c√≥digo faz
        const mudaName = useCallback(() => {
        setName(name => name === 'J√∫lio' ? 'C√©sar' : 'J√∫lio');
        }, []);
    O useCallback diz ao React:
    üëâ ‚ÄúEi, guarda essa fun√ß√£o e n√£o cria uma nova em cada renderiza√ß√£o.‚Äù

    O array de depend√™ncias [] quer dizer:
    üëâ ‚ÄúS√≥ recrie essa fun√ß√£o se algo dentro mudar ‚Äî mas aqui nada muda, ent√£o ela fica fixa.‚Äù

*/

const EstudoDeHooks = () => {
    
    const [name, setName] = useState('');
    const [age, setAge] = useState('');
    
    const mudaName = useCallback(() => {
        setName(name => name === 'J√∫lio' ? 'C√©sar' : 'J√∫lio');
    }, []);

    const anoDeNascimento = useMemo(() => {
       const anoAtual = new Date().getFullYear();
       return age ? anoAtual - age : '';
    }, [age]);

    useEffect(() =>{
        console.log(`O nome mudou para: ${name}`);
        document.getElementById('p').style.backgroundColor = name === 'J√∫lio' ? '#1e90ff' : '#ff4757';
        return () => {
            console.log(`Limpando efeito anterior para o nome: ${name}`);
        };
    }, [name]);

    return (
        <div>
            <p id='p'>
                Nome: {name}
            </p>
            <p>
                Idade: {age}
            </p>
            <p>
                Ano de Nacismento: {anoDeNascimento}
            </p>
            <br />
            <input 
                type="text"
                placeholder="Digite seu nome"
                value={name || ''}
                onChange={(e) => setName(e.target.value)}
            />
            <input 
                type="number"
                placeholder="Digite sua idade"
                value={age || ''}
                onChange={(e) => setAge(Number(e.target.value))}
            />
            <br />
            <button onClick={mudaName}>Mudar Nome</button>
            
        </div>
    )
}

export { EstudoDeHooks };
